---
import { convertImagePathToFiltered } from '../../lib/WP';
import { Image } from 'astro:assets';
import Load from '../../assets/images/load.gif';
interface Props {
    imgPath: string;
    alt: string;
    reverse?: boolean;
}

const { imgPath, alt, reverse }: Props = Astro.props;
const filteredImgPath = convertImagePathToFiltered(imgPath);
export const parentClass = `
	[&_img.normal]:hover:opacity-0
	relative `;
---


<div class="toggle_image relative w-full h-full">
    <img
        class="opacity-0 filtered w-full h-full object-cover"
        src={reverse?imgPath:filteredImgPath}
        alt={alt}
    >
    <img
        class="opacity-0 normal absolute duration-200 top-0 left-0 w-full h-full object-cover"
        src={reverse?filteredImgPath:imgPath}
        alt={alt}
    >
    <Image class="load absolute duration-200 top-0 left-0 w-full h-full object-cover" src={Load} alt=""/>
</div>


<style>
	.toggle_image > img{
		transition: 1s cubic-bezier(0, 0.3, 0, 0.9);
	}
</style>

<script>
    window.addEventListener("load", () => {
        console.log('loaded');
        const loads = document.querySelectorAll('.toggle_image .load');
        const normals = document.querySelectorAll('.toggle_image .normal');
        const filtereds = document.querySelectorAll('.toggle_image .filtered');
        for (let i = 0; i < normals.length; i++) {
            const normal = normals[i] as HTMLImageElement;
            new Promise((resolve) => {
                while(!normal.complete){
                };
                resolve(normal.complete);
            }).then(() => {
                const load = loads[i] as HTMLImageElement;
                load.style.opacity = '0.03';
                const filtered = filtereds[i] as HTMLImageElement;
                filtered.classList.remove('opacity-0');
                normal.classList.remove('opacity-0');
            });
        }
    });
</script>